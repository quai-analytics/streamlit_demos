import streamlit as st
import pandas as pd
import joblib
from utils import *

apply_sidebar_style()
mostrar_sidebar_con_logo()


# -----------------------------
# 1. Cargar modelo
# -----------------------------
model_pipeline = joblib.load('churn_model.pkl')

# -----------------------------
# 2. Configuraci√≥n de la app
# -----------------------------

st.set_page_config(
    page_title="Predictor de fidelizaci√≥n de Clientes",  # T√≠tulo de la pesta√±a
    page_icon="üìâ",                                # Icono de la app
    layout="wide", # "wide" para m√°s espacio, "centered" para un look m√°s compacto
    initial_sidebar_state="expanded"
)

st.title("üìâ Panel de Predicci√≥n de fidelizaci√≥n de Clientes")

st.markdown("""
            > ‚ÑπÔ∏è **Esta aplicaci√≥n inteligente eval√∫a la probabilidad de que un cliente se d√© de baja. 
            Al ingresar datos clave como el tiempo que lleva con nosotros, cargos mensuales, tipo de contrato, 
            quejas y pagos atrasados, te ayudar√° a tomar decisiones estrat√©gicas. Analiza los resultados para 
            contactar a los clientes en riesgo o fortalecer la relaci√≥n con los m√°s fieles.**
            """)

st.divider()
st.write("Ingrese la informaci√≥n del cliente para analizar si tiene alta probabilidad de darse de baja.")

# -----------------------------
# 3. Inputs del usuario
# -----------------------------
col1, col2 = st.columns(2)

with col1:
    tenure = st.number_input("Tenure (meses como cliente)", min_value=1, max_value=60, value=12)
    monthly_charges = st.number_input("Cargos mensuales ($)", min_value=30, max_value=200, value=70)

with col2:
    contract = st.selectbox("Tipo de contrato", ["Month-to-Month", "1-year", "2-year"])
    complaints = st.slider("N√∫mero de quejas", min_value=0, max_value=10, value=0)
    payment_late = st.radio("¬øPagos atrasados?", ["No", "S√≠"])

payment_late = 1 if payment_late == "S√≠" else 0


# Crear dataframe con datos del cliente
new_customer = pd.DataFrame([{
    "Tenure": tenure,
    "MonthlyCharges": monthly_charges,
    "Contract": contract,
    "Complaints": complaints,
    "PaymentLate": payment_late
}])


# -----------------------------
# 4. Predicci√≥n
# -----------------------------
if st.button("Analizar cliente"):
    prediction = model_pipeline.predict(new_customer)[0]
    prob = model_pipeline.predict_proba(new_customer)[0][1]

    if prediction == 1:
        st.error(f"‚ö†Ô∏è El cliente TIENE ALTA PROBABILIDAD de darse de baja ({prob:.2%}), se recomienda contactar.")
    else:
        st.success(f"‚úÖ El cliente probablemente SE MANTENDRA con nosotros: ({1-prob:.2%})")

    st.write("### Detalles de probabilidad")
    st.progress(prob)

mostrar_sidebar_footer()